import socket
import threading
import tkinter as tk
from tkinter import scrolledtext, font

# Global variables for text widgets
master_text_widget = None
slave_text_widget = None
window = None

# Function to update the UI safely
def update_text_widget(widget, message):
    window.after(0, lambda: widget.insert(tk.END, message + "\n"))

# Function to handle the slave (server) operations
def slave_device():
    host = '127.0.0.1'
    port = 65432
    
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as server:
        server.bind((host, port))
        server.listen()
        update_text_widget(slave_text_widget, "Slave device is waiting for connections...")

        while True:
            conn, addr = server.accept()
            update_text_widget(slave_text_widget, f"Connected by {addr}")
            threading.Thread(target=handle_client, args=(conn,)).start()

# Function to handle incoming messages for each client
def handle_client(conn):
    with conn:
        data = conn.recv(1024)
        received_message = data.decode('utf-8')
        update_text_widget(slave_text_widget, f"Received message from Master: {received_message}")

        # Respond to the master
        response = "Acknowledged by Slave"
        conn.sendall(response.encode('utf-8'))
        update_text_widget(slave_text_widget, f"Sent response to Master: {response}")

# Function to handle the master (client) operations
def master_device(message):
    host = '127.0.0.1'
    port = 65432

    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as client:
        try:
            client.connect((host, port))
            update_text_widget(master_text_widget, f"Sending message to Slave: {message}")

            client.sendall(message.encode('utf-8'))

            # Receive the response from the slave
            data = client.recv(1024)
            update_text_widget(master_text_widget, f"Received response from Slave: {data.decode('utf-8')}")
        except ConnectionRefusedError:
            update_text_widget(master_text_widget, "Error: Could not connect to the slave server.")

# Function to handle the master message sending from the GUI
def send_message(master_entry):
    message = master_entry.get()
    if message.strip():
        threading.Thread(target=master_device, args=(message,)).start()
        master_entry.delete(0, tk.END)

# Creating the GUI
def create_gui():
    global master_text_widget, slave_text_widget, window

    window = tk.Tk()
    window.title("Data Communication Simulation")
    window.geometry("600x600")
    window.configure(bg="#2C3E50")

    # Custom fonts
    custom_font = font.Font(family="Segoe UI", size=14, weight="bold")
    text_font = font.Font(family="Segoe UI", size=12)
    developed_font = font.Font(family="Segoe UI", size=12)

    # Frame for layout
    main_frame = tk.Frame(window, bg="#2C3E50")
    main_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)

    # Title Label
    tk.Label(main_frame, text="Data Communication Simulation", font=("Segoe UI", 20), 
             bg="#2C3E50", fg="#ECF0F1").pack(pady=(10, 20))

    # Master Section
    master_frame = tk.Frame(main_frame, bg="#2C3E50")
    master_frame.pack(pady=(10, 20), fill=tk.X)

    tk.Label(master_frame, text="Master Section", font=("Segoe UI", 16), bg="#2C3E50", fg="#ECF0F1").pack(anchor="w", padx=10)

    master_entry = tk.Entry(master_frame, width=50, font=text_font, bg="#34495E", fg="#ffffff", relief='flat')
    master_entry.pack(padx=10, pady=5)

    tk.Button(master_frame, text="Send Message", font=custom_font, bg="#3498DB", fg="#ffffff", 
              relief="flat", activebackground="#2980B9", borderwidth=0, 
              command=lambda: send_message(master_entry)).pack(pady=(5, 10))

    master_text_widget = scrolledtext.ScrolledText(master_frame, height=8, width=60, bg="#34495E", 
                                                   fg="#ffffff", relief="flat", font=text_font)
    master_text_widget.pack(padx=10, pady=10)

    # Slave Section
    slave_frame = tk.Frame(main_frame, bg="#2C3E50")
    slave_frame.pack(pady=(10, 20), fill=tk.X)

    tk.Label(slave_frame, text="Slave Section", font=("Segoe UI", 16), bg="#2C3E50", fg="#ECF0F1").pack(anchor="w", padx=10)

    slave_text_widget = scrolledtext.ScrolledText(slave_frame, height=8, width=60, bg="#34495E", 
                                                  fg="#ffffff", relief="flat", font=text_font)
    slave_text_widget.pack(padx=10, pady=10)

    # Developed by label
    tk.Label(main_frame, text="Developed by Avi", font=developed_font, bg="#2C3E50", fg="#BDC3C7", anchor="e").pack(side=tk.BOTTOM, anchor="se", pady=(5, 5))

    # Start the slave server in a background thread
    threading.Thread(target=slave_device, daemon=True).start()

    window.mainloop()

# Start the GUI
if __name__ == "__main__":
    create_gui()
